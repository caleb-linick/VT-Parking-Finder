VT Parking Finder - CHANGELOG
Version 1.1.0 (April 2025)
New Files

GoogleMapsNavigation.jsx

New component for Google Maps integration
Provides navigation button that redirects to Google Maps
Handles both mobile and desktop platforms
Automatically formats coordinates or addresses for navigation

Start.js

Starts the Frontend and backend servers at the same time
Installs necessary dependencies as well

Updated Files

Login.jsx

Added backend integration with Flask authentication endpoints
Implemented form data submission to /login and /signup endpoints
Added error handling for API responses
Integrated car information collection during signup
Connected to /car endpoint for vehicle data persistence


UserProfile.jsx

Added backend integration for car information management
Connected edit functionality to /car API endpoint
Implemented success/error notification system
Added loading indicators during API operations
Enhanced UI with improved feedback during updates

Updated favorites section to reflect the current favorites persisted on the backend.
Display now dynamically reads from localStorage updated via the backend, ensuring the favorites list is consistent with user actions.



ParkingLotDetail.jsx

Integrated GoogleMapsNavigation component
Added location information section with address details
Enhanced data model to include coordinates and address
Implemented "Navigate to this Parking Lot" button

Added sensor integration for demo - connected sensor to Squires lot block 1
Implemented useEffect to fetch the sensor data

FavoriteParking.jsx

Integrated backend connection for favorites.
Added a useEffect hook to check the user’s login status and fetch favorite spot IDs via the GET /favorites endpoint.
Mapped returned favorite IDs to parking lot details for dynamic display.
Updated localStorage with fresh favorites data to ensure UI consistency after re-login.

ParkingLots.jsx

Enhanced favorites toggling functionality.
Updated the toggleFavorite function to send a POST request to /favorites when the user favorites or unfavorites a parking lot.
On successful backend update, synchronized local state and localStorage to persist changes across sessions.

Front-End to Back-End Connections
The following API connections have been implemented:

Authentication

Frontend Login form → /login endpoint (POST)
Form data sent as application/x-www-form-urlencoded
Backend validates credentials using database_module.authenticate()
Success: User data stored in localStorage
Failure: Error message displayed to user


Registration

Frontend Signup form → /signup endpoint (POST)
Form data sent as application/x-www-form-urlencoded
Backend creates user with database_module.signup_user()
Success: User data stored in localStorage
Failure: Error message displayed to user


Car Information

Frontend Profile edit → /car endpoint (PUT)
Car data sent as application/json
Backend updates car info with database_module.update_car()
Success: User data updated in localStorage
Failure: Error message displayed to user