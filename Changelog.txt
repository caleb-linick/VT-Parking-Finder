VT Parking Finder - CHANGELOG

Version 1.2.0 (April 21 2025)
API Service Layer
apiService.js

Centralized API service for handling all backend requests
Implements JWT token management and automatic inclusion in requests
Provides authentication state functions and localStorage management
Includes error handling and token expiration management



Security Updates
JWT Authentication Implementation

db.py

Added JWT token generation and verification
Implemented static JWT secret key for testing


server.py

Added JWT middleware for protected routes
Updated endpoints to verify JWT tokens for user-specific operations
Implemented proper error responses for authentication failures



Auto Table Creation

db.py

Added automatic table creation for favorites and sensor data
Implemented ensure_favorites_table_exists() function to prevent database errors
Added proper error handling for database operations



Component Updates
App.js

Added JWT authentication checks
Implemented ProtectedRoute component for secure routing
Added token validation on application start

Login.jsx

Updated with JWT token handling
Modified to store tokens in localStorage
Enhanced error handling for authentication failures

Header.jsx

Updated to use JWT for authentication status checks
Improved login state detection using token verification

UserProfile.jsx

Implemented JWT authentication for profile access
Added proper token inclusion in API requests
Enhanced error handling for expired tokens

FavoriteParking.jsx

Fixed backend connection issues for favorites
Added proper error handling for API failures
Implemented secure JWT authentication for favorites retrieval

ParkingLots.jsx

Updated favorites functionality with JWT authentication
Enhanced error handling for favorites operations
Implemented secure API calls with automatic token inclusion

ParkingLotDetail.jsx

Fixed sensor data integration
Enhanced real-time updates with secure API calls
Added visual indicators for sensor-enabled spots
Implemented error handling for sensor data retrieval failures

Backend Improvements

Updated from session-based to token-based (JWT) authentication
Implemented proper token generation on login/signup
Enhanced security with token verification middleware

Database Handling

Added automatic table creation to prevent "relation does not exist" errors
Improved error handling and debugging for database operations
Enhanced sensor data storage and retrieval

start.js

Added PyJWT to Python dependencies

Version 1.1.0 (April 2025)
New Files

GoogleMapsNavigation.jsx

New component for Google Maps integration
Provides navigation button that redirects to Google Maps
Handles both mobile and desktop platforms
Automatically formats coordinates or addresses for navigation

Start.js

Starts the Frontend and backend servers at the same time
Installs necessary dependencies as well

Updated Files

Login.jsx

Added backend integration with Flask authentication endpoints
Implemented form data submission to /login and /signup endpoints
Added error handling for API responses
Integrated car information collection during signup
Connected to /car endpoint for vehicle data persistence


UserProfile.jsx

Added backend integration for car information management
Connected edit functionality to /car API endpoint
Implemented success/error notification system
Added loading indicators during API operations
Enhanced UI with improved feedback during updates

Updated favorites section to reflect the current favorites persisted on the backend.
Display now dynamically reads from localStorage updated via the backend, ensuring the favorites list is consistent with user actions.



ParkingLotDetail.jsx

Integrated GoogleMapsNavigation component
Added location information section with address details
Enhanced data model to include coordinates and address
Implemented "Navigate to this Parking Lot" button

Added sensor integration for demo - connected sensor to Squires lot block 1
Implemented useEffect to fetch the sensor data

FavoriteParking.jsx

Integrated backend connection for favorites.
Added a useEffect hook to check the user’s login status and fetch favorite spot IDs via the GET /favorites endpoint.
Mapped returned favorite IDs to parking lot details for dynamic display.
Updated localStorage with fresh favorites data to ensure UI consistency after re-login.

ParkingLots.jsx

Enhanced favorites toggling functionality.
Updated the toggleFavorite function to send a POST request to /favorites when the user favorites or unfavorites a parking lot.
On successful backend update, synchronized local state and localStorage to persist changes across sessions.

Front-End to Back-End Connections
The following API connections have been implemented:

Authentication

Frontend Login form → /login endpoint (POST)
Form data sent as application/x-www-form-urlencoded
Backend validates credentials using database_module.authenticate()
Success: User data stored in localStorage
Failure: Error message displayed to user


Registration

Frontend Signup form → /signup endpoint (POST)
Form data sent as application/x-www-form-urlencoded
Backend creates user with database_module.signup_user()
Success: User data stored in localStorage
Failure: Error message displayed to user


Car Information

Frontend Profile edit → /car endpoint (PUT)
Car data sent as application/json
Backend updates car info with database_module.update_car()
Success: User data updated in localStorage
Failure: Error message displayed to user