{"ast":null,"code":"/**\r\n * apiService.js\r\n * \r\n * A centralized service for handling API requests with JWT authentication.\r\n * This service automatically attaches JWT tokens to requests and handles token refresh.\r\n * \r\n * Features:\r\n * - Automatic token inclusion in request headers\r\n * - Centralized error handling\r\n * - Response interceptors for potential token refresh\r\n * - Simplified API for common operations (GET, POST, PUT, DELETE)\r\n * \r\n * @author VT Parking Finder Team\r\n * @version 1.2.0\r\n */\n\nimport axios from 'axios';\n\n// Create an axios instance with custom config\nconst api = axios.create({\n  baseURL: '/',\n  // Uses the proxy in development\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for adding token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for handling common errors\napi.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  const originalRequest = error.config;\n\n  // Handle 401 Unauthorized errors\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n\n    // If token is invalid/expired, handle logout\n    if (error.response.data && error.response.data.error === 'Invalid or expired token') {\n      // Clear auth data\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n\n      // Redirect to login page\n      window.location.href = '/login';\n      return Promise.reject(error);\n    }\n  }\n  return Promise.reject(error);\n});\n\n/**\r\n * API service object with methods for common operations\r\n */\nconst apiService = {\n  /**\r\n   * Get current authentication status\r\n   * \r\n   * @returns {boolean} True if user is authenticated\r\n   */\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  },\n  /**\r\n   * Get user data from localStorage\r\n   * \r\n   * @returns {Object|null} User data or null if not authenticated\r\n   */\n  getUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  },\n  /**\r\n   * Login a user and store authentication data\r\n   * \r\n   * @param {string} username - User's username\r\n   * @param {string} password - User's password\r\n   * @returns {Promise} Promise that resolves to user data\r\n   */\n  async login(username, password) {\n    const response = await api.post('/login', {\n      username,\n      password\n    });\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify({\n        id: response.data.user_id,\n        username: response.data.username,\n        car: response.data.car || '',\n        favorites: []\n      }));\n    }\n    return response.data;\n  },\n  /**\r\n   * Register a new user\r\n   * \r\n   * @param {string} username - User's username\r\n   * @param {string} password - User's password\r\n   * @returns {Promise} Promise that resolves to user data\r\n   */\n  async signup(username, password) {\n    const response = await api.post('/signup', {\n      username,\n      password\n    });\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('user', JSON.stringify({\n        id: response.data.user_id,\n        username: response.data.username,\n        car: response.data.car || '',\n        favorites: []\n      }));\n    }\n    return response.data;\n  },\n  /**\r\n   * Update user's car information\r\n   * \r\n   * @param {string} carModel - Car model information\r\n   * @returns {Promise} Promise that resolves to success message\r\n   */\n  async updateCar(carModel) {\n    const response = await api.put('/car', {\n      model: carModel\n    });\n\n    // Update local user data\n    const user = this.getUser();\n    if (user) {\n      user.car = carModel;\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n    return response.data;\n  },\n  /**\r\n   * Fetch user's favorite parking spots\r\n   * \r\n   * @returns {Promise} Promise that resolves to array of favorite IDs\r\n   */\n  async getFavorites() {\n    const response = await api.get('/favorites');\n\n    // Update local user data\n    const user = this.getUser();\n    if (user) {\n      user.favorites = response.data;\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n    return response.data;\n  },\n  /**\r\n   * Update user's favorite parking spots\r\n   * \r\n   * @param {Array} favorites - Array of favorite parking spot IDs\r\n   * @returns {Promise} Promise that resolves to success message\r\n   */\n  async updateFavorites(favorites) {\n    const response = await api.post('/favorites', {\n      favorites\n    });\n\n    // Update local user data\n    const user = this.getUser();\n    if (user) {\n      user.favorites = favorites;\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n    return response.data;\n  },\n  /**\r\n   * Get latest sensor data\r\n   * \r\n   * @param {number} sensorId - ID of the sensor\r\n   * @returns {Promise} Promise that resolves to sensor data\r\n   */\n  async getSensorData(sensorId = 1) {\n    const response = await api.get(`/sensor-data?sensor_id=${sensorId}`);\n    return response.data;\n  },\n  /**\r\n   * Logout the current user\r\n   */\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","originalRequest","status","_retry","data","removeItem","window","location","href","apiService","isAuthenticated","getUser","userStr","JSON","parse","login","username","password","post","setItem","stringify","id","user_id","car","favorites","signup","updateCar","carModel","put","model","user","getFavorites","get","updateFavorites","getSensorData","sensorId","logout"],"sources":["C:/Users/yugio/OneDrive/Desktop/Capstone/VT-Parking-Finder/src/services/apiService.js"],"sourcesContent":["/**\r\n * apiService.js\r\n * \r\n * A centralized service for handling API requests with JWT authentication.\r\n * This service automatically attaches JWT tokens to requests and handles token refresh.\r\n * \r\n * Features:\r\n * - Automatic token inclusion in request headers\r\n * - Centralized error handling\r\n * - Response interceptors for potential token refresh\r\n * - Simplified API for common operations (GET, POST, PUT, DELETE)\r\n * \r\n * @author VT Parking Finder Team\r\n * @version 1.2.0\r\n */\r\n\r\nimport axios from 'axios';\r\n\r\n// Create an axios instance with custom config\r\nconst api = axios.create({\r\n  baseURL: '/', // Uses the proxy in development\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor for adding token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for handling common errors\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    // Handle 401 Unauthorized errors\r\n    if (error.response && error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      \r\n      // If token is invalid/expired, handle logout\r\n      if (error.response.data && error.response.data.error === 'Invalid or expired token') {\r\n        // Clear auth data\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        \r\n        // Redirect to login page\r\n        window.location.href = '/login';\r\n        return Promise.reject(error);\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * API service object with methods for common operations\r\n */\r\nconst apiService = {\r\n  /**\r\n   * Get current authentication status\r\n   * \r\n   * @returns {boolean} True if user is authenticated\r\n   */\r\n  isAuthenticated() {\r\n    return !!localStorage.getItem('token');\r\n  },\r\n  \r\n  /**\r\n   * Get user data from localStorage\r\n   * \r\n   * @returns {Object|null} User data or null if not authenticated\r\n   */\r\n  getUser() {\r\n    const userStr = localStorage.getItem('user');\r\n    return userStr ? JSON.parse(userStr) : null;\r\n  },\r\n  \r\n  /**\r\n   * Login a user and store authentication data\r\n   * \r\n   * @param {string} username - User's username\r\n   * @param {string} password - User's password\r\n   * @returns {Promise} Promise that resolves to user data\r\n   */\r\n  async login(username, password) {\r\n    const response = await api.post('/login', { username, password });\r\n    \r\n    if (response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n      localStorage.setItem('user', JSON.stringify({\r\n        id: response.data.user_id,\r\n        username: response.data.username,\r\n        car: response.data.car || '',\r\n        favorites: []\r\n      }));\r\n    }\r\n    \r\n    return response.data;\r\n  },\r\n  \r\n  /**\r\n   * Register a new user\r\n   * \r\n   * @param {string} username - User's username\r\n   * @param {string} password - User's password\r\n   * @returns {Promise} Promise that resolves to user data\r\n   */\r\n  async signup(username, password) {\r\n    const response = await api.post('/signup', { username, password });\r\n    \r\n    if (response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n      localStorage.setItem('user', JSON.stringify({\r\n        id: response.data.user_id,\r\n        username: response.data.username,\r\n        car: response.data.car || '',\r\n        favorites: []\r\n      }));\r\n    }\r\n    \r\n    return response.data;\r\n  },\r\n  \r\n  /**\r\n   * Update user's car information\r\n   * \r\n   * @param {string} carModel - Car model information\r\n   * @returns {Promise} Promise that resolves to success message\r\n   */\r\n  async updateCar(carModel) {\r\n    const response = await api.put('/car', { model: carModel });\r\n    \r\n    // Update local user data\r\n    const user = this.getUser();\r\n    if (user) {\r\n      user.car = carModel;\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n    }\r\n    \r\n    return response.data;\r\n  },\r\n  \r\n  /**\r\n   * Fetch user's favorite parking spots\r\n   * \r\n   * @returns {Promise} Promise that resolves to array of favorite IDs\r\n   */\r\n  async getFavorites() {\r\n    const response = await api.get('/favorites');\r\n    \r\n    // Update local user data\r\n    const user = this.getUser();\r\n    if (user) {\r\n      user.favorites = response.data;\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n    }\r\n    \r\n    return response.data;\r\n  },\r\n  \r\n  /**\r\n   * Update user's favorite parking spots\r\n   * \r\n   * @param {Array} favorites - Array of favorite parking spot IDs\r\n   * @returns {Promise} Promise that resolves to success message\r\n   */\r\n  async updateFavorites(favorites) {\r\n    const response = await api.post('/favorites', { favorites });\r\n    \r\n    // Update local user data\r\n    const user = this.getUser();\r\n    if (user) {\r\n      user.favorites = favorites;\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n    }\r\n    \r\n    return response.data;\r\n  },\r\n  \r\n  /**\r\n   * Get latest sensor data\r\n   * \r\n   * @param {number} sensorId - ID of the sensor\r\n   * @returns {Promise} Promise that resolves to sensor data\r\n   */\r\n  async getSensorData(sensorId = 1) {\r\n    const response = await api.get(`/sensor-data?sensor_id=${sensorId}`);\r\n    return response.data;\r\n  },\r\n  \r\n  /**\r\n   * Logout the current user\r\n   */\r\n  logout() {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  }\r\n};\r\n\r\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}