{"ast":null,"code":"var _jsxFileName = \"/home/ugrads/majors/kennethlao120/VT-Parking-Finder/src/components/GoogleMapsNavigation.jsx\",\n  _s = $RefreshSig$();\n/**\n * GoogleMapsNavigation.jsx\n * \n * This component provides a button to navigate to a parking lot using Google Maps.\n * Integrated into ParkingLotDetail.jsx to allow users to get directions.\n * \n * Features:\n * - Opens Google Maps in a new tab with directions to the selected parking lot\n * - Handles different device types (mobile vs desktop)\n * - Provides visual feedback while loading\n * \n * @author VT Parking Finder Team\n * @version 1.0.0\n */\n\nimport React, { useState } from 'react';\n\n/**\n * Component that renders a button for Google Maps navigation\n * \n * @param {Object} props - Component props\n * @param {string} props.name - Name of the parking lot\n * @param {Array} props.coordinates - [latitude, longitude] of the parking lot\n * @param {string} props.address - The address of the parking lot (optional)\n * @returns {JSX.Element} A button that opens Google Maps navigation\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GoogleMapsNavigation = ({\n  name,\n  coordinates,\n  address\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n\n  /**\n   * Opens Google Maps with directions to the parking lot\n   * Handles both mobile and desktop platforms\n   */\n  const openGoogleMaps = () => {\n    if (!coordinates || coordinates.length !== 2) {\n      console.error('Invalid coordinates provided');\n      return;\n    }\n    setIsLoading(true);\n\n    // Extract latitude and longitude\n    const [latitude, longitude] = coordinates;\n\n    // Create the destination string (prefer address if available)\n    const destination = address ? encodeURIComponent(address) : `${latitude},${longitude}`;\n\n    // Create the location name for display\n    const locationName = encodeURIComponent(name);\n\n    // Detect if device is mobile\n    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n\n    // Different URL formats for mobile vs desktop\n    let mapsUrl;\n    if (isMobile) {\n      // Mobile Google Maps app URL (will open in the app if installed)\n      mapsUrl = `https://www.google.com/maps/dir/?api=1&destination=${destination}&destination_place_id=${locationName}`;\n    } else {\n      // Desktop Google Maps URL\n      mapsUrl = `https://www.google.com/maps/dir/?api=1&destination=${destination}&travelmode=driving`;\n    }\n\n    // Open Google Maps in a new tab\n    window.open(mapsUrl, '_blank');\n\n    // Reset loading state after a short delay\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 500);\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: openGoogleMaps,\n    style: styles.button,\n    disabled: isLoading,\n    \"aria-label\": `Get directions to ${name} using Google Maps`,\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"span\", {\n      style: styles.loadingText,\n      children: \"Opening Maps...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: styles.icon,\n        children: \"\\uD83D\\uDCCD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Navigate to this Parking Lot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n/**\n * Component styles\n */\n_s(GoogleMapsNavigation, \"EmvgwIb3cHpoFpeP+WmEDbjx4y4=\");\n_c = GoogleMapsNavigation;\nconst styles = {\n  button: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#4285F4',\n    // Google blue\n    color: 'white',\n    border: 'none',\n    borderRadius: '4px',\n    padding: '10px 15px',\n    fontSize: '16px',\n    fontWeight: 'bold',\n    cursor: 'pointer',\n    transition: 'background-color 0.3s',\n    width: '100%',\n    marginTop: '10px'\n  },\n  icon: {\n    marginRight: '8px',\n    fontSize: '18px'\n  },\n  loadingText: {\n    display: 'flex',\n    alignItems: 'center'\n  }\n};\nexport default GoogleMapsNavigation;\nvar _c;\n$RefreshReg$(_c, \"GoogleMapsNavigation\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","GoogleMapsNavigation","name","coordinates","address","_s","isLoading","setIsLoading","openGoogleMaps","length","console","error","latitude","longitude","destination","encodeURIComponent","locationName","isMobile","test","navigator","userAgent","mapsUrl","window","open","setTimeout","onClick","style","styles","button","disabled","children","loadingText","fileName","_jsxFileName","lineNumber","columnNumber","icon","_c","display","alignItems","justifyContent","backgroundColor","color","border","borderRadius","padding","fontSize","fontWeight","cursor","transition","width","marginTop","marginRight","$RefreshReg$"],"sources":["/home/ugrads/majors/kennethlao120/VT-Parking-Finder/src/components/GoogleMapsNavigation.jsx"],"sourcesContent":["/**\n * GoogleMapsNavigation.jsx\n * \n * This component provides a button to navigate to a parking lot using Google Maps.\n * Integrated into ParkingLotDetail.jsx to allow users to get directions.\n * \n * Features:\n * - Opens Google Maps in a new tab with directions to the selected parking lot\n * - Handles different device types (mobile vs desktop)\n * - Provides visual feedback while loading\n * \n * @author VT Parking Finder Team\n * @version 1.0.0\n */\n\nimport React, { useState } from 'react';\n\n/**\n * Component that renders a button for Google Maps navigation\n * \n * @param {Object} props - Component props\n * @param {string} props.name - Name of the parking lot\n * @param {Array} props.coordinates - [latitude, longitude] of the parking lot\n * @param {string} props.address - The address of the parking lot (optional)\n * @returns {JSX.Element} A button that opens Google Maps navigation\n */\nconst GoogleMapsNavigation = ({ name, coordinates, address }) => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  /**\n   * Opens Google Maps with directions to the parking lot\n   * Handles both mobile and desktop platforms\n   */\n  const openGoogleMaps = () => {\n    if (!coordinates || coordinates.length !== 2) {\n      console.error('Invalid coordinates provided');\n      return;\n    }\n\n    setIsLoading(true);\n\n    // Extract latitude and longitude\n    const [latitude, longitude] = coordinates;\n    \n    // Create the destination string (prefer address if available)\n    const destination = address \n      ? encodeURIComponent(address)\n      : `${latitude},${longitude}`;\n    \n    // Create the location name for display\n    const locationName = encodeURIComponent(name);\n\n    // Detect if device is mobile\n    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n    \n    // Different URL formats for mobile vs desktop\n    let mapsUrl;\n    if (isMobile) {\n      // Mobile Google Maps app URL (will open in the app if installed)\n      mapsUrl = `https://www.google.com/maps/dir/?api=1&destination=${destination}&destination_place_id=${locationName}`;\n    } else {\n      // Desktop Google Maps URL\n      mapsUrl = `https://www.google.com/maps/dir/?api=1&destination=${destination}&travelmode=driving`;\n    }\n    \n    // Open Google Maps in a new tab\n    window.open(mapsUrl, '_blank');\n    \n    // Reset loading state after a short delay\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 500);\n  };\n\n  return (\n    <button \n      onClick={openGoogleMaps} \n      style={styles.button}\n      disabled={isLoading}\n      aria-label={`Get directions to ${name} using Google Maps`}\n    >\n      {isLoading ? (\n        <span style={styles.loadingText}>Opening Maps...</span>\n      ) : (\n        <>\n          <span style={styles.icon}>üìç</span>\n          <span>Navigate to this Parking Lot</span>\n        </>\n      )}\n    </button>\n  );\n};\n\n/**\n * Component styles\n */\nconst styles = {\n  button: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#4285F4', // Google blue\n    color: 'white',\n    border: 'none',\n    borderRadius: '4px',\n    padding: '10px 15px',\n    fontSize: '16px',\n    fontWeight: 'bold',\n    cursor: 'pointer',\n    transition: 'background-color 0.3s',\n    width: '100%',\n    marginTop: '10px',\n  },\n  icon: {\n    marginRight: '8px',\n    fontSize: '18px',\n  },\n  loadingText: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n};\n\nexport default GoogleMapsNavigation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}